#import Pacemaker
#import Block_Tree
# #import 
from os import umask
import block
from src import pacemaker
from src import leader_election 
from block import BlockTree
from safety import SafetyPrivate


class Validator(process):

    def setup (servers):
        #self.broadcast = servers
        self.u=None


    def process_certificate_qc(qc):
        block.BlockTree.process_qc(qc)
        leader_election.LeaderElection.update_leaders(qc)
        pacemaker.Pacemaker.advance_round(qc.vote_info.round)
    
    def process_proposal_msg(proposal_msg):
        process_certificate_qc(proposal_msg.block.qc)
        process_certificate_qc(proposal_msg.high_commit_qc.qc)
        pacemaker.Pacemaker.advance_round_tc(proposal_msg.last_round_tc)
        round = pacemaker.Pacemaker.current_round
        leader= leader_election.get_leader(round)
        if(proposal_msg.block.round!=round or proposal_msg.sender!=leader or proposal_msg.block.author!= leader):
            return
        BlockTree.execute_and_insert(proposal_msg)
        vote_msg = SafetyPrivate.make_vote(proposal_msg.block,proposal_msg.last_round_tc)
        if (vote_msg is not None):
            send (vote_msg, to = leader_election.LeaderElection.get_leader(round+1))
        
    
    def process_timeout_msg(timeout_msg):
        process_certificate_qc(timeout_msg.tmo_info.high_qc)
        process_certificate_qc(timeout_msg.high_commit_qc)
        pacemaker.Pacemaker.advance_round_tc(timeout_msg.last_round_tc)
        tc = pacemaker.Pacemaker.process_remote_timeout(timeout_msg)
        if tc != None:
            pacemaker.Pacemaker.advance_round(tc)
            process_new_round_event(tc)
    
    def process_vote_msg(vote_msg):
        qc= block.BlockTree.process_vote(vote_msg)
        if qc is not None:
            process_certificate_qc(qc)
            process_new_round_event(None)
    
    def process_new_round_event(last_tc):
        leader = leader_election.LeaderElection.get_leader(pacemaker.Pacemaker.current_round)
        if(leader==id):
            block =  BlockTree.generate_block(MemPool.get_transactions(),pacemaker.PaceMaker.current_round)
            send(vote_msg, to=broadcast)

    def run():
        while(1):
            # process never stops
            if await(some(received((_, term, _, _, _, _, _)))):
                reset(received)

    def receive(msg=('LOCAL_TIMEOUT')):
        #Pacemaker.local_timeout_round()
        pass

    def receive(msg=('PROPOSAL_MESSAGE')):
        # process_proposal_msg(msg)
        pass

    def receive(msg=('VOTE_MESSAGE')):
        # process_vote_msg(msg)
        pass

    def receive(msg=('TIMEOUT_MSG')):
        #process_timeout_message(msg)
        pass


class Run(process):
    #def setup(config):
     #   self.nrounds = config['nrounds']
      #  self.npings = config['npings']
    
    def run():
        m = new(MainModule, num= 5)
        setup(m)
        start(m)

def main():
    config(clock='Lamport')
    configs = [{'nrounds':3, 'npings':3}, {'nrounds': 1, 'npings':2}]
    for config in configs:
        p = new(Run)
        setup(p,(config,))
        start(p)
