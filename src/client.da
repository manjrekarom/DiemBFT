import sys
import logging
from random import random
import mempool

class Client(process):
    """
    Client class to communicate with validators
    """
    def setup(c_id, client_priv, validator_pub, validators: set, n_client_reqs: int, client_tmo: float):
        self.round_no = 1
        self.comitted_nodes = set()
        self.comitted_answer= dict()
        self.answer= dict()
        self.done = False

    def run():
        while(round_no <= n_client_reqs):    
            send(("Propose" , round_no, id , "Client" + str(id) + "-" + str(round_no)), to=validators)
            if await(done):
                output("Round " + str(round_no)+ " done on client "+ str(id) + " with value " + answer[round_no] + " onto round " + str(round_no+1))
                round_no = round_no + 1
                comitted_nodes.clear()
                comitted_answer.clear()
                done = False

            elif timeout(client_tmo):
                output("Timing out for round ", round_no)
        send(('Done',), to= validators)

    def receive(msg=('Comitted', i, message_content), from_=p):
        if(i==(round_no)):
            if(p not in comitted_nodes):
                comitted_nodes.add(p)
                if message_content not in comitted_answer:
                    comitted_answer[message_content]=1
                else:
                    comitted_answer[message_content]+=1    
                if(comitted_answer[message_content] >=(total_validators/2)):
                    done = True
                    answer[round_no] = message_content 
                output("Client  Votes needed ", total_validators/2)

    

# class Validators(process):
    
#     def setup(client_set:Set(Client), i:int, failiure_probability:float):
#         self.rec=0
#         self.memorypool = mempool.mempool()

#     def run(): 
#         await(rec == len(client_set))
#         output("Validator ", i, " Exiting" )

#     def receive(msg=('Done' ,) ):
#         rec = rec+1
#         output("rec is", rec, " on client ",i)
    
    # def receive(msg=('Propose' , round_no, id, message_content), from_=c):
    #     memorypool.try_to_add_to_mempool(('Propose' , round_no, id, message_content))
    #     output("Received message for round ", round_no, "from client ", id)
    #     memorypool.commit_to_cache(round_no, id, 'Comitted ' + str(round_no) + ' - ' + str(id))
    #     send(('Comitted',round_no, 'Comitted ' + str(round_no) + ' - ' + str(id)), to=c)
        

# def main():
    
#     rounds=10
#     failiure_probability=0.1
#     client_tmo =2
#     nvalidators= 10
#     nclient = 5
#     c = new(Client,num=nclient)
#     validators = new(Validators, num= nvalidators)
#     index=0

#     for client in enumerate(c):
#         setup(client,(len(validators), rounds, validators, client_tmo,index))
#         index=index+1
    
#     for validator in enumerate(validators):
#         setup(validator,(c, index, failiure_probability))
#         index=index+1

#     start(validators)
#     start(c)