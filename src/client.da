import sys
import logging
from random import random
import mempool

class Client(process):
    """
    Client class to communicate with validators
    """
    def setup(c_id, client_priv, validator_pub, validators: set, n_client_reqs: int, 
    client_tmo: float):
        self.round_no = 1
        self.comitted_nodes = set()
        self.comitted_answer= dict()
        self.answer= dict()
        self.done = False
        self.unique_replies = 0
        self.total_validators = len(validator_pub)

    def run():
        while round_no <= n_client_reqs:    
            send(("Propose", round_no, c_id, f'Client{c_id}-{round_no}'), 
            to=validators)
            if await(done):
                output("Round " + str(round_no)+ " done on client "+ str(c_id) + 
                " with value " + answer[round_no] + " onto round " + str(round_no+1))
                round_no = round_no + 1
                comitted_nodes.clear()
                comitted_answer.clear()
                done = False
            elif timeout(client_tmo):
                output("Timing out for round ", round_no)
        send(('Done',), to= validators)

    def receive(msg=('Committed', i, message_content), from_=p):
        output('Received reply from validator')
        if i == round_no:
            if p not in comitted_nodes:
                comitted_nodes.add(p)
                if message_content not in comitted_answer:
                    comitted_answer[message_content]=1
                else:
                    comitted_answer[message_content]+=1    
                if(comitted_answer[message_content] >= (total_validators + 1) // 2):
                    done = True
                    answer[round_no] = message_content 
                output("Client votes needed ", (total_validators + 1) // 2)
