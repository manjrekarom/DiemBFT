from nacl.signing import SigningKey
from nacl.encoding import Base64Encoder

from client import Client
from validator import Validator


class RunDiem(process):
    def setup(config, n_case, parent):
        self.n_clients = config['n_clients']
        self.n_client_reqs = config['n_client_reqs']
        self.client_tmo = config['client_tmo']
        self.n_validators = config['n_validators']
        self.validator_rr = config['validator_rtt']

    def run():
        # create clients and validators
        validators = new(Validator, num=n_validators)
        clients = new(Client, num=n_clients)
        # key pairs for distribution
        validator_priv = []
        validator_pub = []
        client_priv = []
        client_pub = []
        # create keys
        for i in range(n_clients):
            priv_key = SigningKey.generate()
            pub_key = priv_key.verify_key.encode(encoder=Base64Encoder)
            client_priv.append(priv_key)
            client_pub.append(pub_key)
        for i in range(n_validators):
            priv_key = SigningKey.generate()
            pub_key = priv_key.verify_key.encode(encoder=Base64Encoder)
            validator_priv.append(priv_key)
            validator_pub.append(pub_key)
        # setup
        for i, validator in enumerate(validators):
            setup(validator, (validator_priv[i], validator_pub, client_pub, n_case, validator_rtt))
        for i, client in enumerate(clients):
            setup(client, (client_priv[index], client_pub, validators, ncrequest,nctimeout, index, nvalidators))

        start(validators)
        start(clients)
        
        await(each(c in clients, has=received(('Done',), from_=clients)))
        output("Done with all requests on all clients....Exiting") 
        return None


def main():
    config(channel = 'fifo', clock='Lamport')
    # list of configurations
    configs = [{'n_clients': 3, 'n_client_reqs': 3, 'client_tmo': 1, 
    'n_validators': 2, 'validator_rtt': 5}]
    # running test cases with listed configs
    for i, config in enumerate(configs):
        test_case = new(RunDiem)
        setup(test_case, (config, i, test_case))
        start(test_case)
