from typing import List



class SafetyPrivate:
    _private_key: str
    _public_keys: List[str]
    _highest_vote_round: int
    _highest_qc_round: int

    def increase_highest_vote_round(self, round):
        self._highest_vote_round = max(round, self._highest_vote_round)

    def update_highest_qc_round(self, qc_round):
        self._highest_qc_round = max(qc_round, self._highest_qc_round)

    def consecutive(self, block_round, round):
        # TODO: CHECK
        return round + 1 == block_round

    def safe_to_extend(self, block_round, qc_round, tc: TC):
        return self.consecutive(block_round, tc.round) and \
            (qc_round >= max(tc.tmo_high_qc_rounds)) 

    def safe_to_vote(self, block_round, qc_round, tc: TC):
        if block_round <= max(self._highest_vote_round, qc_round):
            return False
        return self.consecutive(block_round, qc_round) and \
            self.safe_to_extend(block_round, qc_round, tc)

    def safe_to_timeout(self, round, qc_round, tc):
        if qc_round < self._highest_qc_round and \
            round <= max(self._highest_vote_round - 1, qc_round):
            return False
        return self.consecutive(round, qc_round) and self.consecutive(round, tc.round)

    def commit_state_id_candidate(self, block_round, qc):
        if self.consecutive(block_round, qc.vote_info.round):
            return Ledger.pending_state(qc.id)
        else:
            return None


class SafetyPublic:
    
    def make_vote(self, b, last_tc): 
        logger = logging.getLogger()
        qc_round = b.qc.vote_info.round
        if SafetyPrivate.safe_to_vote(b.round, qc_round, last_tc):
            SafetyPrivate.update_highest_qc_round(qc_round)  # Protect the QC round
            SafetyPrivate.increase_highest_vote_round(b.round)  # Don't vote again in this or lower round

            # VoteInfo contains the info about the  potential QC info with the ids and rounds of the parent QC

            vote_info = BlockTree.VoteInfo((b.id, b.round), (b.qc.vote_info.id, b.qc.vote_info.round), Ledger.pending_state(b.id))
            logger.info(vote_info)

            ledger_commit_info = BlockTree.LedgerCommitInfo(SafetyPrivate.commit_state_id_candidate(b.round, b.qc), hash(vote_info))
            logger.info(ledger_commit_info)

            return BlockTree.VoteMsg(vote_info, ledger_commit_info, BlockTree.high_commit_qc)
        return None

    """ def make_timout(round, high_qc, last_tc):
        qc_round = high_qc.vote_info.round
        if valid_signatures(high_qc, last_tc) and SafetyPrivate.safe_to_timeout(round, qc_round, last_tc):
            SafetyPrivate.increase_highest_vote_round(round)  # Stop voting for round
            return TimeoutInfo (round, high_qc)
        return None """